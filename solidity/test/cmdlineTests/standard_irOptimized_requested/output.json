{"contracts":{"A":{"C":{"irOptimized":"/*******************************************************\n *                       WARNING                       *\n *  Solidity to Yul compilation is still EXPERIMENTAL  *\n *       It can result in LOSS OF FUNDS or worse       *\n *                !USE AT YOUR OWN RISK!               *\n *******************************************************/\n\nobject \"C_6\" {\n    code {\n        mstore(64, 128)\n        codecopy(0, dataoffset(\"C_6_deployed\"), datasize(\"C_6_deployed\"))\n        return(0, datasize(\"C_6_deployed\"))\n    }\n    object \"C_6_deployed\" {\n        code {\n            mstore(64, 128)\n            if iszero(lt(calldatasize(), 4))\n            {\n                let selector := shift_right_224_unsigned(calldataload(0))\n                switch selector\n                case 0x26121ff0 {\n                    if callvalue()\n                    {\n                        revert(0, 0)\n                    }\n                    abi_decode_tuple_(4, calldatasize())\n                    fun_f_5()\n                    let memPos := allocateMemory(0)\n                    let memEnd := abi_encode_tuple__to__fromStack(memPos)\n                    return(memPos, sub(memEnd, memPos))\n                }\n                default {\n                }\n            }\n            revert(0, 0)\n            function abi_decode_tuple_(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert(0, 0)\n                }\n            }\n            function abi_encode_tuple__to__fromStack(headStart) -> tail\n            {\n                tail := add(headStart, 0)\n            }\n            function allocateMemory(size) -> memPtr\n            {\n                memPtr := mload(64)\n                let newFreePtr := add(memPtr, size)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    revert(0, 0)\n                }\n                mstore(64, newFreePtr)\n            }\n            function fun_f_5()\n            {\n                for {\n                    let return_flag := 1\n                }\n                return_flag\n                {\n                }\n                {\n                    break\n                }\n            }\n            function shift_right_224_unsigned(value) -> newValue\n            {\n                newValue := shr(224, value)\n            }\n        }\n    }\n}\n"}}},"sources":{"A":{"id":0}}}
